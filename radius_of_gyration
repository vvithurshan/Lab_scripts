def COM(positions, masses):
    positions = np.array(positions)
    masses = np.array(masses)

    # Calculate the center of mass
    total_mass = np.sum(masses)
    center_of_mass = np.sum(masses[:, np.newaxis] * positions, axis=0) / total_mass
    return center_of_mass

def radius_of_gyration(positions, masses):
    # Convert to numpy arrays if not already
    positions = np.array(positions)
    masses = np.array(masses)

    # Calculate the center of mass
    total_mass = np.sum(masses)
    center_of_mass = np.sum(masses[:, np.newaxis] * positions, axis=0) / total_mass

    # Compute squared distances from the center of mass
    squared_distances = np.sum((positions - center_of_mass)**2, axis=1)

    # Compute the radius of gyration
    rg = np.sqrt(np.sum(masses * squared_distances) / total_mass)

    return rg
